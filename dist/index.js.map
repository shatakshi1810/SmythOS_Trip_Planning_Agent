{"version":3,"file":"index.js","sources":["../src/agents/BookAssistant.agent.ts","../src/agents/CryptoAssistant.agent.ts","../src/utils/TerminalChat.ts","../src/index.ts"],"sourcesContent":["import { Agent, Doc, Model } from '@smythos/sdk';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n/**\n * This is an example of a simple agent where the skills are implemented programmatically\n *\n */\n\nconst __dirname = process.cwd();\nconst BOOKS_NAMESPACE = 'books';\n\n//#region [ Agent Instance] ===================================\n\n//We create the agent instance\nconst agent = new Agent({\n    id: 'book-assistant', //<=== agent id is important for data isolation in vector DBs and Storage\n\n    //the name of the agent, this is how the agent will identify itself\n    name: 'Book Assistant',\n\n    //here we are using a builtin model\n    //note that we are not passing an apiKey because we will rely on smyth vault for the model credentials\n    model: 'gpt-4o',\n\n    //the behavior of the agent, this describes the personnality and behavior of the agent\n    behavior: 'You are a helpful assistant that can answer questions about the books.',\n});\n\n//We create a vectorDB instance, at the agent scope\n//RAMVec is a minimal in memory vectorDB, we mostly use it for testing and development\n//In production we will use a more robust vectorDB like Pinecone or Milvus\nconst ramvec = agent.vectorDB.RAMVec(BOOKS_NAMESPACE, {\n    embeddings: Model.OpenAI('text-embedding-3-small'),\n});\n\n//#endregion\n\n//#region [ Skills ] ===================================\n\n//Index a book in RAMVec vector database\nagent.addSkill({\n    name: 'index_book',\n    description: 'Use this skill to index a book in a vector database, the user will provide the path to the book',\n    process: async ({ book_path }) => {\n        const filePath = path.resolve(__dirname, book_path);\n        if (!fs.existsSync(filePath)) {\n            return `File resolved path to ${filePath} does not exist`;\n        }\n\n        const parsedDoc = await Doc.auto.parse(filePath);\n\n        const name = path.basename(filePath);\n        const result = await ramvec.insertDoc(name, parsedDoc);\n\n        if (result) {\n            return `Book ${name} indexed successfully`;\n        } else {\n            return `Book ${name} indexing failed`;\n        }\n    },\n});\n\n//Lookup a book in RAMVec vector database\nagent.addSkill({\n    name: 'lookup_book',\n    description: 'Use this skill to lookup a book in the vector database',\n    process: async ({ user_query }) => {\n        const result = await ramvec.search(user_query, {\n            topK: 5,\n        });\n        return result;\n    },\n});\n\n//Openlibrary lookup : this is a simple skill that uses the openlibrary API to get information about a book\nconst openlibraryLookupSkill = agent.addSkill({\n    name: 'get_book_info',\n    description: 'Use this skill to get information about a book',\n    process: async ({ book_name }) => {\n        const url = `https://openlibrary.org/search.json?q=${book_name}`;\n\n        const response = await fetch(url);\n        const data = await response.json();\n\n        return data.docs[0];\n    },\n});\n\n//The skill that we just created requires a book_name input,\n// sometime the agent LLM will need a description or more details about the input in order to use it properly\n//below we add a description to the book_name input in order to tell the LLM how to use it\nopenlibraryLookupSkill.in({\n    book_name: {\n        description: 'This need to be a name of a book, extract it from the user query',\n    },\n});\n\n//#endregion\n\nexport default agent;\n","import { Agent, Model } from '@smythos/sdk';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n/**\n * This is an example of an agent imported from a .smyth file\n * .smyth files are produced by the SmythOS Studio (Agent visual editor)\n *\n * All the skills are described in .smyth file, we don't need to implement them programmatically\n */\n\nconst __dirname = process.cwd();\nconst agentPath = path.resolve(__dirname, './data/crypto-assistant.smyth');\n\nconst agent = Agent.import(agentPath, {\n    id: 'crypto-assistant', //<=== Chat persistence requires an explicitly identified agent\n    model: 'gpt-4o', //<=== we can override agent settings, here we are setting the model to gpt-4o\n});\n\nexport default agent;\n","import { Chat, TLLMEvent } from '@smythos/sdk';\nimport chalk from 'chalk';\nimport readline from 'readline';\n\n/**\n * This function runs a chat session using a chat object.\n * a chat object is obtained from an Agent.\n * @param chat\n */\nexport function runChat(chat: Chat) {\n    // Create readline interface for user input\n    const rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout,\n        prompt: chalk.blue('You: '),\n    });\n\n    console.log(chalk.green(`\\n🚀 ${chat.agentData.name} is ready!`));\n    console.log(chalk.gray('Type your question below to talk to the agent.'));\n    console.log(chalk.gray('Type \"exit\" or \"quit\" to end the conversation.\\n'));\n\n    // Set up readline event handlers\n    rl.on('line', (input) => handleUserInput(input, rl, chat));\n\n    rl.on('close', () => {\n        console.log(chalk.gray('Chat session ended.'));\n        process.exit(0);\n    });\n\n    // Start the interactive chat\n    rl.prompt();\n}\n\n// Function to handle user input and chat response\nasync function handleUserInput(input: string, rl: readline.Interface, chat: Chat) {\n    if (input.toLowerCase().trim() === 'exit' || input.toLowerCase().trim() === 'quit') {\n        console.log(chalk.green('👋 Goodbye!'));\n        rl.close();\n        return;\n    }\n\n    if (input.trim() === '') {\n        rl.prompt();\n        return;\n    }\n\n    try {\n        console.log(chalk.gray('Assistant is thinking...'));\n\n        // Send message to the agent and get response\n        const streamChat = await chat.prompt(input).stream();\n\n        // Clear the current line and move to a new line for the response\n        process.stdout.write('\\r');\n        let first = true;\n\n        streamChat.on(TLLMEvent.Content, (content) => {\n            if (first) {\n                content = chalk.green('🤖 Assistant: ') + content;\n                first = false;\n            }\n            // Write content without interfering with readline\n            process.stdout.write(chalk.white(content));\n        });\n\n        streamChat.on(TLLMEvent.End, () => {\n            console.log('\\n');\n            // Restore the prompt after streaming is complete\n            rl.prompt();\n        });\n\n        streamChat.on(TLLMEvent.Error, (error) => {\n            console.error(chalk.red('❌ Error:', error));\n            rl.prompt();\n        });\n\n        streamChat.on(TLLMEvent.ToolCall, (toolCall) => {\n            console.log(\n                chalk.yellow('[Calling Tool]'),\n                toolCall?.tool?.name,\n                chalk.gray(typeof toolCall?.tool?.arguments === 'object' ? JSON.stringify(toolCall?.tool?.arguments) : toolCall?.tool?.arguments)\n            );\n        });\n    } catch (error) {\n        console.error(chalk.red('❌ Error:', error));\n        rl.prompt();\n    }\n}\n","//IMPORTANT NOTE : Your API keys are configured in one of the following files :\n//  .smyth/.sre/vault.json\n//  ~/.smyth/.sre/vault.json\n\n//Edit the vault.json file to update your API keys\n\nimport BookAssistantAgent from './agents/BookAssistant.agent';\nimport CryptoAssistantAgent from './agents/CryptoAssistant.agent';\nimport { runChat } from './utils/TerminalChat';\nimport inquirer from 'inquirer';\n\n//In this example we wanted to demo something cooler\n//We are using inquirer to ask the user which agent they want to chat with\n//then we start a chat session with the selected agent\n\n//Below main() function you can find other ways to interact with the agent\nconst main = async () => {\n    const { agentChoice } = await inquirer.prompt([\n        {\n            type: 'list',\n            name: 'agentChoice',\n            message: 'Use arrow keys to select an agent and press enter to start the chat',\n            choices: ['Book Assistant', 'Crypto Assistant'],\n        },\n    ]);\n\n    //Select the agent based on the user's choice\n    let agent;\n    if (agentChoice === 'Book Assistant') {\n        agent = BookAssistantAgent;\n    } else {\n        agent = CryptoAssistantAgent;\n    }\n\n    //Create a chat object from the agent\n\n    //this is used to identify the chat session, using the same ID will load the previous chat session\n    const sessionId = `my-chat-session-${agentChoice.replace(' ', '-')}`;\n    const chat = agent.chat({\n        id: sessionId,\n        persist: true,\n    });\n\n    //Run the chat session in the terminal\n    runChat(chat);\n};\n\nmain();\n\n//Below you can find other ways to interact with the agent\n\n//1. call a skill directly\n// const result = await BookAssistantAgent.call('get_book_info', {\n//     book_name: 'The Black Swan',\n// });\n// console.log(result);\n\n//2. prompt\n//const result = await BookAssistantAgent.prompt('Who is the author of the book \"The Black Swan\"?');\n//console.log(result);\n\n//3. prompt and stream response\n// const stream = await BookAssistantAgent.prompt('Who is the author of the book \"The Black Swan\"?').stream();\n// stream.on(TLLMEvent.Content, (content) => {\n//     console.log(content);\n// });\n"],"names":["__dirname","agent","BookAssistantAgent","CryptoAssistantAgent"],"mappings":";;;;;;;AAUA,MAAMA,WAAA,GAAY,QAAQ,GAAI,EAAA,CAAA;AAC9B,MAAM,eAAkB,GAAA,OAAA,CAAA;AAKxB,MAAMC,OAAA,GAAQ,IAAI,KAAM,CAAA;AAAA,EACpB,EAAI,EAAA,gBAAA;AAAA;AAAA;AAAA,EAGJ,IAAM,EAAA,gBAAA;AAAA;AAAA;AAAA,EAIN,KAAO,EAAA,QAAA;AAAA;AAAA,EAGP,QAAU,EAAA,wEAAA;AACd,CAAC,CAAA,CAAA;AAKD,MAAM,MAAS,GAAAA,OAAA,CAAM,QAAS,CAAA,MAAA,CAAO,eAAiB,EAAA;AAAA,EAClD,UAAA,EAAY,KAAM,CAAA,MAAA,CAAO,wBAAwB,CAAA;AACrD,CAAC,CAAA,CAAA;AAODA,OAAA,CAAM,QAAS,CAAA;AAAA,EACX,IAAM,EAAA,YAAA;AAAA,EACN,WAAa,EAAA,iGAAA;AAAA,EACb,OAAS,EAAA,OAAO,EAAE,SAAA,EAAgB,KAAA;AAC9B,IAAA,MAAM,QAAW,GAAA,IAAA,CAAK,OAAQ,CAAAD,WAAA,EAAW,SAAS,CAAA,CAAA;AAClD,IAAA,IAAI,CAAC,EAAA,CAAG,UAAW,CAAA,QAAQ,CAAG,EAAA;AAC1B,MAAA,OAAO,yBAAyB,QAAQ,CAAA,eAAA,CAAA,CAAA;AAAA,KAC5C;AAEA,IAAA,MAAM,SAAY,GAAA,MAAM,GAAI,CAAA,IAAA,CAAK,MAAM,QAAQ,CAAA,CAAA;AAE/C,IAAM,MAAA,IAAA,GAAO,IAAK,CAAA,QAAA,CAAS,QAAQ,CAAA,CAAA;AACnC,IAAA,MAAM,MAAS,GAAA,MAAM,MAAO,CAAA,SAAA,CAAU,MAAM,SAAS,CAAA,CAAA;AAErD,IAAA,IAAI,MAAQ,EAAA;AACR,MAAA,OAAO,QAAQ,IAAI,CAAA,qBAAA,CAAA,CAAA;AAAA,KAChB,MAAA;AACH,MAAA,OAAO,QAAQ,IAAI,CAAA,gBAAA,CAAA,CAAA;AAAA,KACvB;AAAA,GACJ;AACJ,CAAC,CAAA,CAAA;AAGDC,OAAA,CAAM,QAAS,CAAA;AAAA,EACX,IAAM,EAAA,aAAA;AAAA,EACN,WAAa,EAAA,wDAAA;AAAA,EACb,OAAS,EAAA,OAAO,EAAE,UAAA,EAAiB,KAAA;AAC/B,IAAA,MAAM,MAAS,GAAA,MAAM,MAAO,CAAA,MAAA,CAAO,UAAY,EAAA;AAAA,MAC3C,IAAM,EAAA,CAAA;AAAA,KACT,CAAA,CAAA;AACD,IAAO,OAAA,MAAA,CAAA;AAAA,GACX;AACJ,CAAC,CAAA,CAAA;AAGD,MAAM,sBAAA,GAAyBA,QAAM,QAAS,CAAA;AAAA,EAC1C,IAAM,EAAA,eAAA;AAAA,EACN,WAAa,EAAA,gDAAA;AAAA,EACb,OAAS,EAAA,OAAO,EAAE,SAAA,EAAgB,KAAA;AAC9B,IAAM,MAAA,GAAA,GAAM,yCAAyC,SAAS,CAAA,CAAA,CAAA;AAE9D,IAAM,MAAA,QAAA,GAAW,MAAM,KAAA,CAAM,GAAG,CAAA,CAAA;AAChC,IAAM,MAAA,IAAA,GAAO,MAAM,QAAA,CAAS,IAAK,EAAA,CAAA;AAEjC,IAAO,OAAA,IAAA,CAAK,KAAK,CAAC,CAAA,CAAA;AAAA,GACtB;AACJ,CAAC,CAAA,CAAA;AAKD,sBAAA,CAAuB,EAAG,CAAA;AAAA,EACtB,SAAW,EAAA;AAAA,IACP,WAAa,EAAA,kEAAA;AAAA,GACjB;AACJ,CAAC,CAAA;;ACtFD,MAAM,SAAA,GAAY,QAAQ,GAAI,EAAA,CAAA;AAC9B,MAAM,SAAY,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,EAAW,+BAA+B,CAAA,CAAA;AAEzE,MAAM,KAAA,GAAQ,KAAM,CAAA,MAAA,CAAO,SAAW,EAAA;AAAA,EAClC,EAAI,EAAA,kBAAA;AAAA;AAAA,EACJ,KAAO,EAAA,QAAA;AAAA;AACX,CAAC,CAAA;;ACRM,SAAS,QAAQ,IAAY,EAAA;AAEhC,EAAM,MAAA,EAAA,GAAK,SAAS,eAAgB,CAAA;AAAA,IAChC,OAAO,OAAQ,CAAA,KAAA;AAAA,IACf,QAAQ,OAAQ,CAAA,MAAA;AAAA,IAChB,MAAA,EAAQ,KAAM,CAAA,IAAA,CAAK,OAAO,CAAA;AAAA,GAC7B,CAAA,CAAA;AAED,EAAQ,OAAA,CAAA,GAAA,CAAI,MAAM,KAAM,CAAA,CAAA;AAAA,UAAA,EAAQ,IAAK,CAAA,SAAA,CAAU,IAAI,CAAA,UAAA,CAAY,CAAC,CAAA,CAAA;AAChE,EAAA,OAAA,CAAQ,GAAI,CAAA,KAAA,CAAM,IAAK,CAAA,gDAAgD,CAAC,CAAA,CAAA;AACxE,EAAA,OAAA,CAAQ,GAAI,CAAA,KAAA,CAAM,IAAK,CAAA,kDAAkD,CAAC,CAAA,CAAA;AAG1E,EAAG,EAAA,CAAA,EAAA,CAAG,QAAQ,CAAC,KAAA,KAAU,gBAAgB,KAAO,EAAA,EAAA,EAAI,IAAI,CAAC,CAAA,CAAA;AAEzD,EAAG,EAAA,CAAA,EAAA,CAAG,SAAS,MAAM;AACjB,IAAA,OAAA,CAAQ,GAAI,CAAA,KAAA,CAAM,IAAK,CAAA,qBAAqB,CAAC,CAAA,CAAA;AAC7C,IAAA,OAAA,CAAQ,KAAK,CAAC,CAAA,CAAA;AAAA,GACjB,CAAA,CAAA;AAGD,EAAA,EAAA,CAAG,MAAO,EAAA,CAAA;AACd,CAAA;AAGA,eAAe,eAAA,CAAgB,KAAe,EAAA,EAAA,EAAwB,IAAY,EAAA;AAC9E,EAAI,IAAA,KAAA,CAAM,WAAY,EAAA,CAAE,IAAK,EAAA,KAAM,MAAU,IAAA,KAAA,CAAM,WAAY,EAAA,CAAE,IAAK,EAAA,KAAM,MAAQ,EAAA;AAChF,IAAA,OAAA,CAAQ,GAAI,CAAA,KAAA,CAAM,KAAM,CAAA,oBAAa,CAAC,CAAA,CAAA;AACtC,IAAA,EAAA,CAAG,KAAM,EAAA,CAAA;AACT,IAAA,OAAA;AAAA,GACJ;AAEA,EAAI,IAAA,KAAA,CAAM,IAAK,EAAA,KAAM,EAAI,EAAA;AACrB,IAAA,EAAA,CAAG,MAAO,EAAA,CAAA;AACV,IAAA,OAAA;AAAA,GACJ;AAEA,EAAI,IAAA;AACA,IAAA,OAAA,CAAQ,GAAI,CAAA,KAAA,CAAM,IAAK,CAAA,0BAA0B,CAAC,CAAA,CAAA;AAGlD,IAAA,MAAM,aAAa,MAAM,IAAA,CAAK,MAAO,CAAA,KAAK,EAAE,MAAO,EAAA,CAAA;AAGnD,IAAQ,OAAA,CAAA,MAAA,CAAO,MAAM,IAAI,CAAA,CAAA;AACzB,IAAA,IAAI,KAAQ,GAAA,IAAA,CAAA;AAEZ,IAAA,UAAA,CAAW,EAAG,CAAA,SAAA,CAAU,OAAS,EAAA,CAAC,OAAY,KAAA;AAC1C,MAAA,IAAI,KAAO,EAAA;AACP,QAAU,OAAA,GAAA,KAAA,CAAM,KAAM,CAAA,uBAAgB,CAAI,GAAA,OAAA,CAAA;AAC1C,QAAQ,KAAA,GAAA,KAAA,CAAA;AAAA,OACZ;AAEA,MAAA,OAAA,CAAQ,MAAO,CAAA,KAAA,CAAM,KAAM,CAAA,KAAA,CAAM,OAAO,CAAC,CAAA,CAAA;AAAA,KAC5C,CAAA,CAAA;AAED,IAAW,UAAA,CAAA,EAAA,CAAG,SAAU,CAAA,GAAA,EAAK,MAAM;AAC/B,MAAA,OAAA,CAAQ,IAAI,IAAI,CAAA,CAAA;AAEhB,MAAA,EAAA,CAAG,MAAO,EAAA,CAAA;AAAA,KACb,CAAA,CAAA;AAED,IAAA,UAAA,CAAW,EAAG,CAAA,SAAA,CAAU,KAAO,EAAA,CAAC,KAAU,KAAA;AACtC,MAAA,OAAA,CAAQ,KAAM,CAAA,KAAA,CAAM,GAAI,CAAA,eAAA,EAAY,KAAK,CAAC,CAAA,CAAA;AAC1C,MAAA,EAAA,CAAG,MAAO,EAAA,CAAA;AAAA,KACb,CAAA,CAAA;AAED,IAAA,UAAA,CAAW,EAAG,CAAA,SAAA,CAAU,QAAU,EAAA,CAAC,QAAa,KAAA;AAC5C,MAAQ,OAAA,CAAA,GAAA;AAAA,QACJ,KAAA,CAAM,OAAO,gBAAgB,CAAA;AAAA,QAC7B,UAAU,IAAM,EAAA,IAAA;AAAA,QAChB,KAAM,CAAA,IAAA,CAAK,OAAO,QAAA,EAAU,MAAM,SAAc,KAAA,QAAA,GAAW,IAAK,CAAA,SAAA,CAAU,UAAU,IAAM,EAAA,SAAS,CAAI,GAAA,QAAA,EAAU,MAAM,SAAS,CAAA;AAAA,OACpI,CAAA;AAAA,KACH,CAAA,CAAA;AAAA,WACI,KAAO,EAAA;AACZ,IAAA,OAAA,CAAQ,KAAM,CAAA,KAAA,CAAM,GAAI,CAAA,eAAA,EAAY,KAAK,CAAC,CAAA,CAAA;AAC1C,IAAA,EAAA,CAAG,MAAO,EAAA,CAAA;AAAA,GACd;AACJ;;ACvEA,MAAM,OAAO,YAAY;AACrB,EAAA,MAAM,EAAE,WAAA,EAAgB,GAAA,MAAM,SAAS,MAAO,CAAA;AAAA,IAC1C;AAAA,MACI,IAAM,EAAA,MAAA;AAAA,MACN,IAAM,EAAA,aAAA;AAAA,MACN,OAAS,EAAA,qEAAA;AAAA,MACT,OAAA,EAAS,CAAC,gBAAA,EAAkB,kBAAkB,CAAA;AAAA,KAClD;AAAA,GACH,CAAA,CAAA;AAGD,EAAI,IAAAA,OAAA,CAAA;AACJ,EAAA,IAAI,gBAAgB,gBAAkB,EAAA;AAClC,IAAQA,OAAA,GAAAC,OAAA,CAAA;AAAA,GACL,MAAA;AACH,IAAQD,OAAA,GAAAE,KAAA,CAAA;AAAA,GACZ;AAKA,EAAA,MAAM,YAAY,CAAmB,gBAAA,EAAA,WAAA,CAAY,OAAQ,CAAA,GAAA,EAAK,GAAG,CAAC,CAAA,CAAA,CAAA;AAClE,EAAM,MAAA,IAAA,GAAOF,QAAM,IAAK,CAAA;AAAA,IACpB,EAAI,EAAA,SAAA;AAAA,IACJ,OAAS,EAAA,IAAA;AAAA,GACZ,CAAA,CAAA;AAGD,EAAA,OAAA,CAAQ,IAAI,CAAA,CAAA;AAChB,CAAA,CAAA;AAEA,IAAK,EAAA"}